//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from "axios";
import type {
  AxiosInstance,
  AxiosRequestConfig,
  AxiosResponse,
  CancelToken,
} from "axios";

export class Client {
  protected instance: AxiosInstance;
  protected baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance || axios.create();

    this.baseUrl = baseUrl ?? "";
  }

  /**
   * @param body (optional)
   * @return Success
   */
  createCustomer(
    body: CreateCustomerDTORequest | undefined,
    cancelToken?: CancelToken
  ): Promise<Customer> {
    let url_ = this.baseUrl + "/api/customers/create-customer";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "text/plain",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateCustomer(_response);
      });
  }

  protected processCreateCustomer(response: AxiosResponse): Promise<Customer> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (const k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Customer.fromJS(resultData200);
      return Promise.resolve<Customer>(result200);
    } else if (status === 500) {
      const _responseText = response.data;
      let result500: any = null;
      let resultData500 = _responseText;
      result500 = ProblemDetails.fromJS(resultData500);
      return throwException(
        "Server Error",
        status,
        _responseText,
        _headers,
        result500
      );
    } else if (status === 400) {
      const _responseText = response.data;
      let result400: any = null;
      let resultData400 = _responseText;
      result400 = ProblemDetails.fromJS(resultData400);
      return throwException(
        "Bad Request",
        status,
        _responseText,
        _headers,
        result400
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<Customer>(null as any);
  }

  /**
   * @return Success
   */
  getAllCustomers(cancelToken?: CancelToken): Promise<Customer[]> {
    let url_ = this.baseUrl + "/api/customers/get-all-customers";
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {
        Accept: "text/plain",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetAllCustomers(_response);
      });
  }

  protected processGetAllCustomers(
    response: AxiosResponse
  ): Promise<Customer[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (const k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(Customer.fromJS(item));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<Customer[]>(result200);
    } else if (status === 500) {
      const _responseText = response.data;
      let result500: any = null;
      let resultData500 = _responseText;
      result500 = ProblemDetails.fromJS(resultData500);
      return throwException(
        "Server Error",
        status,
        _responseText,
        _headers,
        result500
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<Customer[]>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  createProject(
    body: CreateProjectDTORequest | undefined,
    cancelToken?: CancelToken
  ): Promise<Project> {
    let url_ = this.baseUrl + "/api/projects/create-project";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "text/plain",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateProject(_response);
      });
  }

  protected processCreateProject(response: AxiosResponse): Promise<Project> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (const k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Project.fromJS(resultData200);
      return Promise.resolve<Project>(result200);
    } else if (status === 500) {
      const _responseText = response.data;
      let result500: any = null;
      let resultData500 = _responseText;
      result500 = ProblemDetails.fromJS(resultData500);
      return throwException(
        "Server Error",
        status,
        _responseText,
        _headers,
        result500
      );
    } else if (status === 400) {
      const _responseText = response.data;
      let result400: any = null;
      let resultData400 = _responseText;
      result400 = ProblemDetails.fromJS(resultData400);
      return throwException(
        "Bad Request",
        status,
        _responseText,
        _headers,
        result400
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<Project>(null as any);
  }

  /**
   * @return Success
   */
  getAllProjects(cancelToken?: CancelToken): Promise<Project[]> {
    let url_ = this.baseUrl + "/api/projects/get-all-projects";
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {
        Accept: "text/plain",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetAllProjects(_response);
      });
  }

  protected processGetAllProjects(response: AxiosResponse): Promise<Project[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (const k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(Project.fromJS(item));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<Project[]>(result200);
    } else if (status === 500) {
      const _responseText = response.data;
      let result500: any = null;
      let resultData500 = _responseText;
      result500 = ProblemDetails.fromJS(resultData500);
      return throwException(
        "Server Error",
        status,
        _responseText,
        _headers,
        result500
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<Project[]>(null as any);
  }

  /**
   * @param projectId (optional)
   * @return Success
   */
  completeProject(
    projectId: string | undefined,
    cancelToken?: CancelToken
  ): Promise<Project> {
    let url_ = this.baseUrl + "/api/projects/complete-project?";
    if (projectId === null)
      throw new Error("The parameter 'projectId' cannot be null.");
    else if (projectId !== undefined)
      url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "PATCH",
      url: url_,
      headers: {
        Accept: "text/plain",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCompleteProject(_response);
      });
  }

  protected processCompleteProject(response: AxiosResponse): Promise<Project> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (const k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Project.fromJS(resultData200);
      return Promise.resolve<Project>(result200);
    } else if (status === 500) {
      const _responseText = response.data;
      let result500: any = null;
      let resultData500 = _responseText;
      result500 = ProblemDetails.fromJS(resultData500);
      return throwException(
        "Server Error",
        status,
        _responseText,
        _headers,
        result500
      );
    } else if (status === 400) {
      const _responseText = response.data;
      let result400: any = null;
      let resultData400 = _responseText;
      result400 = ProblemDetails.fromJS(resultData400);
      return throwException(
        "Bad Request",
        status,
        _responseText,
        _headers,
        result400
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<Project>(null as any);
  }

  /**
   * @param projectId (optional)
   * @return Success
   */
  openProject(
    projectId: string | undefined,
    cancelToken?: CancelToken
  ): Promise<Project> {
    let url_ = this.baseUrl + "/api/projects/open-project?";
    if (projectId === null)
      throw new Error("The parameter 'projectId' cannot be null.");
    else if (projectId !== undefined)
      url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "PATCH",
      url: url_,
      headers: {
        Accept: "text/plain",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processOpenProject(_response);
      });
  }

  protected processOpenProject(response: AxiosResponse): Promise<Project> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (const k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Project.fromJS(resultData200);
      return Promise.resolve<Project>(result200);
    } else if (status === 500) {
      const _responseText = response.data;
      let result500: any = null;
      let resultData500 = _responseText;
      result500 = ProblemDetails.fromJS(resultData500);
      return throwException(
        "Server Error",
        status,
        _responseText,
        _headers,
        result500
      );
    } else if (status === 400) {
      const _responseText = response.data;
      let result400: any = null;
      let resultData400 = _responseText;
      result400 = ProblemDetails.fromJS(resultData400);
      return throwException(
        "Bad Request",
        status,
        _responseText,
        _headers,
        result400
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<Project>(null as any);
  }

  /**
   * @param projectId (optional)
   * @return Success
   */
  deleteProject(
    projectId: string | undefined,
    cancelToken?: CancelToken
  ): Promise<void> {
    let url_ = this.baseUrl + "/api/projects/delete-project?";
    if (projectId === null)
      throw new Error("The parameter 'projectId' cannot be null.");
    else if (projectId !== undefined)
      url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "DELETE",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteProject(_response);
      });
  }

  protected processDeleteProject(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (const k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      return Promise.resolve<void>(null as any);
    } else if (status === 500) {
      const _responseText = response.data;
      let result500: any = null;
      let resultData500 = _responseText;
      result500 = ProblemDetails.fromJS(resultData500);
      return throwException(
        "Server Error",
        status,
        _responseText,
        _headers,
        result500
      );
    } else if (status === 400) {
      const _responseText = response.data;
      let result400: any = null;
      let resultData400 = _responseText;
      result400 = ProblemDetails.fromJS(resultData400);
      return throwException(
        "Bad Request",
        status,
        _responseText,
        _headers,
        result400
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return Success
   */
  getRegistrationsOfProject(
    projectId: string,
    cancelToken?: CancelToken
  ): Promise<GetRegistrationsForProjectResponse[]> {
    let url_ =
      this.baseUrl + "/api/registrations/get-registrations-of-project?";
    if (projectId === undefined || projectId === null)
      throw new Error(
        "The parameter 'projectId' must be defined and cannot be null."
      );
    else url_ += "ProjectId=" + encodeURIComponent("" + projectId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {
        Accept: "text/plain",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetRegistrationsOfProject(_response);
      });
  }

  protected processGetRegistrationsOfProject(
    response: AxiosResponse
  ): Promise<GetRegistrationsForProjectResponse[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (const k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(GetRegistrationsForProjectResponse.fromJS(item));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<GetRegistrationsForProjectResponse[]>(result200);
    } else if (status === 500) {
      const _responseText = response.data;
      let result500: any = null;
      let resultData500 = _responseText;
      result500 = ProblemDetails.fromJS(resultData500);
      return throwException(
        "Server Error",
        status,
        _responseText,
        _headers,
        result500
      );
    } else if (status === 400) {
      const _responseText = response.data;
      let result400: any = null;
      let resultData400 = _responseText;
      result400 = ProblemDetails.fromJS(resultData400);
      return throwException(
        "Bad Request",
        status,
        _responseText,
        _headers,
        result400
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<GetRegistrationsForProjectResponse[]>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  createRegistration(
    body: CreateRegistrationDTORequest | undefined,
    cancelToken?: CancelToken
  ): Promise<Registration> {
    let url_ = this.baseUrl + "/api/registrations/create-registration";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "text/plain",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreateRegistration(_response);
      });
  }

  protected processCreateRegistration(
    response: AxiosResponse
  ): Promise<Registration> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (const k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Registration.fromJS(resultData200);
      return Promise.resolve<Registration>(result200);
    } else if (status === 500) {
      const _responseText = response.data;
      let result500: any = null;
      let resultData500 = _responseText;
      result500 = ProblemDetails.fromJS(resultData500);
      return throwException(
        "Server Error",
        status,
        _responseText,
        _headers,
        result500
      );
    } else if (status === 400) {
      const _responseText = response.data;
      let result400: any = null;
      let resultData400 = _responseText;
      result400 = ProblemDetails.fromJS(resultData400);
      return throwException(
        "Bad Request",
        status,
        _responseText,
        _headers,
        result400
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<Registration>(null as any);
  }

  /**
   * @param registrationId (optional)
   * @return Success
   */
  deleteRegistration(
    registrationId: string | undefined,
    cancelToken?: CancelToken
  ): Promise<void> {
    let url_ = this.baseUrl + "/api/registrations/delete-registration?";
    if (registrationId === null)
      throw new Error("The parameter 'registrationId' cannot be null.");
    else if (registrationId !== undefined)
      url_ += "registrationId=" + encodeURIComponent("" + registrationId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "DELETE",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteRegistration(_response);
      });
  }

  protected processDeleteRegistration(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (const k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      return Promise.resolve<void>(null as any);
    } else if (status === 500) {
      const _responseText = response.data;
      let result500: any = null;
      let resultData500 = _responseText;
      result500 = ProblemDetails.fromJS(resultData500);
      return throwException(
        "Server Error",
        status,
        _responseText,
        _headers,
        result500
      );
    } else if (status === 400) {
      const _responseText = response.data;
      let result400: any = null;
      let resultData400 = _responseText;
      result400 = ProblemDetails.fromJS(resultData400);
      return throwException(
        "Bad Request",
        status,
        _responseText,
        _headers,
        result400
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(null as any);
  }
}

export class CreateCustomerDTORequest implements ICreateCustomerDTORequest {
  name!: string | undefined;

  constructor(data?: ICreateCustomerDTORequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data["name"];
    }
  }

  static fromJS(data: any): CreateCustomerDTORequest {
    data = typeof data === "object" ? data : {};
    let result = new CreateCustomerDTORequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["name"] = this.name;
    return data;
  }
}

export interface ICreateCustomerDTORequest {
  name: string | undefined;
}

export class CreateProjectDTORequest implements ICreateProjectDTORequest {
  name!: string;
  customerId!: string;
  description!: string | undefined;
  deadline!: Date;

  constructor(data?: ICreateProjectDTORequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data["name"];
      this.customerId = _data["customerId"];
      this.description = _data["description"];
      this.deadline = _data["deadline"]
        ? new Date(_data["deadline"].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any): CreateProjectDTORequest {
    data = typeof data === "object" ? data : {};
    let result = new CreateProjectDTORequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["name"] = this.name;
    data["customerId"] = this.customerId;
    data["description"] = this.description;
    data["deadline"] = this.deadline
      ? this.deadline.toISOString()
      : <any>undefined;
    return data;
  }
}

export interface ICreateProjectDTORequest {
  name: string;
  customerId: string;
  description: string | undefined;
  deadline: Date;
}

export class CreateRegistrationDTORequest
  implements ICreateRegistrationDTORequest
{
  description!: string | undefined;
  projectId!: string;
  hoursWorked!: number;
  registrationDate!: Date;

  constructor(data?: ICreateRegistrationDTORequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.description = _data["description"];
      this.projectId = _data["projectId"];
      this.hoursWorked = _data["hoursWorked"];
      this.registrationDate = _data["registrationDate"]
        ? new Date(_data["registrationDate"].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any): CreateRegistrationDTORequest {
    data = typeof data === "object" ? data : {};
    let result = new CreateRegistrationDTORequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["description"] = this.description;
    data["projectId"] = this.projectId;
    data["hoursWorked"] = this.hoursWorked;
    data["registrationDate"] = this.registrationDate
      ? this.registrationDate.toISOString()
      : <any>undefined;
    return data;
  }
}

export interface ICreateRegistrationDTORequest {
  description: string | undefined;
  projectId: string;
  hoursWorked: number;
  registrationDate: Date;
}

export class Customer implements ICustomer {
  id!: string;
  name!: string | undefined;
  createdOn!: Date;
  updatedOn!: Date;

  constructor(data?: ICustomer) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      this.createdOn = _data["createdOn"]
        ? new Date(_data["createdOn"].toString())
        : <any>undefined;
      this.updatedOn = _data["updatedOn"]
        ? new Date(_data["updatedOn"].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any): Customer {
    data = typeof data === "object" ? data : {};
    let result = new Customer();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["createdOn"] = this.createdOn
      ? this.createdOn.toISOString()
      : <any>undefined;
    data["updatedOn"] = this.updatedOn
      ? this.updatedOn.toISOString()
      : <any>undefined;
    return data;
  }
}

export interface ICustomer {
  id: string;
  name: string | undefined;
  createdOn: Date;
  updatedOn: Date;
}

export class GetRegistrationsForProjectResponse
  implements IGetRegistrationsForProjectResponse
{
  id!: string;
  registrationDate!: Date;
  description!: string | undefined;
  createdOn!: Date;
  updatedOn!: Date;
  hoursWorked!: number;

  constructor(data?: IGetRegistrationsForProjectResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.registrationDate = _data["registrationDate"]
        ? new Date(_data["registrationDate"].toString())
        : <any>undefined;
      this.description = _data["description"];
      this.createdOn = _data["createdOn"]
        ? new Date(_data["createdOn"].toString())
        : <any>undefined;
      this.updatedOn = _data["updatedOn"]
        ? new Date(_data["updatedOn"].toString())
        : <any>undefined;
      this.hoursWorked = _data["hoursWorked"];
    }
  }

  static fromJS(data: any): GetRegistrationsForProjectResponse {
    data = typeof data === "object" ? data : {};
    let result = new GetRegistrationsForProjectResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["id"] = this.id;
    data["registrationDate"] = this.registrationDate
      ? this.registrationDate.toISOString()
      : <any>undefined;
    data["description"] = this.description;
    data["createdOn"] = this.createdOn
      ? this.createdOn.toISOString()
      : <any>undefined;
    data["updatedOn"] = this.updatedOn
      ? this.updatedOn.toISOString()
      : <any>undefined;
    data["hoursWorked"] = this.hoursWorked;
    return data;
  }
}

export interface IGetRegistrationsForProjectResponse {
  id: string;
  registrationDate: Date;
  description: string | undefined;
  createdOn: Date;
  updatedOn: Date;
  hoursWorked: number;
}

export class ProblemDetails implements IProblemDetails {
  type!: string | undefined;
  title!: string | undefined;
  status!: number | undefined;
  detail!: string | undefined;
  instance!: string | undefined;

  [key: string]: any;

  constructor(data?: IProblemDetails) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      for (var property in _data) {
        if (_data.hasOwnProperty(property)) this[property] = _data[property];
      }
      this.type = _data["type"];
      this.title = _data["title"];
      this.status = _data["status"];
      this.detail = _data["detail"];
      this.instance = _data["instance"];
    }
  }

  static fromJS(data: any): ProblemDetails {
    data = typeof data === "object" ? data : {};
    let result = new ProblemDetails();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    for (var property in this) {
      if (this.hasOwnProperty(property)) data[property] = this[property];
    }
    data["type"] = this.type;
    data["title"] = this.title;
    data["status"] = this.status;
    data["detail"] = this.detail;
    data["instance"] = this.instance;
    return data;
  }
}

export interface IProblemDetails {
  type: string | undefined;
  title: string | undefined;
  status: number | undefined;
  detail: string | undefined;
  instance: string | undefined;

  [key: string]: any;
}

export class Project implements IProject {
  id!: string;
  name!: string | undefined;
  description!: string | undefined;
  customerId!: string;
  customer!: Customer;
  createdOn!: Date;
  updatedOn!: Date;
  deadline!: Date;
  isCompleted!: boolean;

  constructor(data?: IProject) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      this.description = _data["description"];
      this.customerId = _data["customerId"];
      this.customer = _data["customer"]
        ? Customer.fromJS(_data["customer"])
        : <any>undefined;
      this.createdOn = _data["createdOn"]
        ? new Date(_data["createdOn"].toString())
        : <any>undefined;
      this.updatedOn = _data["updatedOn"]
        ? new Date(_data["updatedOn"].toString())
        : <any>undefined;
      this.deadline = _data["deadline"]
        ? new Date(_data["deadline"].toString())
        : <any>undefined;
      this.isCompleted = _data["isCompleted"];
    }
  }

  static fromJS(data: any): Project {
    data = typeof data === "object" ? data : {};
    let result = new Project();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["description"] = this.description;
    data["customerId"] = this.customerId;
    data["customer"] = this.customer ? this.customer.toJSON() : <any>undefined;
    data["createdOn"] = this.createdOn
      ? this.createdOn.toISOString()
      : <any>undefined;
    data["updatedOn"] = this.updatedOn
      ? this.updatedOn.toISOString()
      : <any>undefined;
    data["deadline"] = this.deadline
      ? this.deadline.toISOString()
      : <any>undefined;
    data["isCompleted"] = this.isCompleted;
    return data;
  }
}

export interface IProject {
  id: string;
  name: string | undefined;
  description: string | undefined;
  customerId: string;
  customer: Customer;
  createdOn: Date;
  updatedOn: Date;
  deadline: Date;
  isCompleted: boolean;
}

export class Registration implements IRegistration {
  id!: string;
  registrationDate!: Date;
  description!: string | undefined;
  projectId!: string;
  createdOn!: Date;
  updatedOn!: Date;
  hoursWorked!: number;

  constructor(data?: IRegistration) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.registrationDate = _data["registrationDate"]
        ? new Date(_data["registrationDate"].toString())
        : <any>undefined;
      this.description = _data["description"];
      this.projectId = _data["projectId"];
      this.createdOn = _data["createdOn"]
        ? new Date(_data["createdOn"].toString())
        : <any>undefined;
      this.updatedOn = _data["updatedOn"]
        ? new Date(_data["updatedOn"].toString())
        : <any>undefined;
      this.hoursWorked = _data["hoursWorked"];
    }
  }

  static fromJS(data: any): Registration {
    data = typeof data === "object" ? data : {};
    let result = new Registration();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["id"] = this.id;
    data["registrationDate"] = this.registrationDate
      ? this.registrationDate.toISOString()
      : <any>undefined;
    data["description"] = this.description;
    data["projectId"] = this.projectId;
    data["createdOn"] = this.createdOn
      ? this.createdOn.toISOString()
      : <any>undefined;
    data["updatedOn"] = this.updatedOn
      ? this.updatedOn.toISOString()
      : <any>undefined;
    data["hoursWorked"] = this.hoursWorked;
    return data;
  }
}

export interface IRegistration {
  id: string;
  registrationDate: Date;
  description: string | undefined;
  projectId: string;
  createdOn: Date;
  updatedOn: Date;
  hoursWorked: number;
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any
): any {
  if (result !== null && result !== undefined) throw result;
  else throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
  return obj && obj.isAxiosError === true;
}
